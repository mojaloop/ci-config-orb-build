description: |
  This job scans the Docker image for vulnerabilities using Anchore.
executor: anchore/anchore_engine
shell: /bin/sh -leo pipefail ## Ref: https://circleci.com/docs/env-vars/#alpine-linux
environment:
  MAIN_BRANCH_NAME: main
  BASH_ENV: /etc/profile ## Ref: https://circleci.com/docs/env-vars/#alpine-linux
  ENV: ~/.profile
  NVM_ARCH_UNOFFICIAL_OVERRIDE: x64-musl ## Ref: https://github.com/nvm-sh/nvm/issues/1102#issuecomment-550572252
parameters:
  base_image:
    type: string
    default: ''
  aws:
    type: string
    default: ''
  slack:
    type: string
    default: ''
working_directory: /home/circleci/project
steps:
  - checkout
  - check_dockerfile
  - setup_remote_docker
  - attach_workspace:
      at: /tmp
  - run:
      name: Install docker dependencies for anchore
      command: |
        apk add --update py-pip docker python3-dev libffi-dev openssl-dev gcc libc-dev make jq curl bash
  - when:
      condition: << parameters.aws >>
      steps:
        - aws_dependencies
  - checkout
  - run:
      name: Setup Slack config
      command: |
        echo "export SLACK_PROJECT_NAME=${CIRCLE_PROJECT_REPONAME}" >> $BASH_ENV
        echo "export SLACK_RELEASE_TYPE='GitHub Release'" >> $BASH_ENV
        echo "export SLACK_RELEASE_TAG='${RELEASE_TAG} on ${CIRCLE_BRANCH} branch'" >> $BASH_ENV
        echo "export SLACK_BUILD_ID=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
        echo "export SLACK_CI_URL=${CIRCLE_BUILD_URL}" >> $BASH_ENV
        echo "export SLACK_CUSTOM_MSG='Anchore Image Scan failed for: \`${DOCKER_ORG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}\`'" >> $BASH_ENV
  - configure_nvm
  - display_versions
  - docker_dependencies
  - run:
      name: Load the pre-built docker image from workspace
      command: docker load -i /tmp/docker-image.tar
  - run:
      name: Download the mojaloop/ci-config repo
      command: |
        git clone https://github.com/mojaloop/ci-config /tmp/ci-config
        # Generate the mojaloop anchore-policy
        cd /tmp/ci-config/container-scanning && ./mojaloop-policy-generator.js /tmp/mojaloop-policy.json
  - run:
      name: Export base image variable
      command: |
        BASE_IMAGE=<< parameters.base_image >>
        if [ -z "$BASE_IMAGE" ]; then
          BASE_IMAGE=node:$NVMRC_VERSION-alpine3.19
        fi
        echo "export BASE_IMAGE=${BASE_IMAGE}" >> $BASH_ENV
  - run:
      name: Pull base image locally
      command: |
        echo "Pulling docker image: $BASE_IMAGE"
        docker pull $BASE_IMAGE
  ## Analyze the base and derived image
  ## Note: It seems images are scanned in parallel, so preloading the base image result doesn't give us any real performance gain
  - anchore/analyze_local_image:
      # Force the older version, version 0.7.0 was just published, and is broken
      anchore_version: v0.10.2
      image_name: "docker.io/$BASE_IMAGE ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:local"
      policy_failure: false
      timeout: '500'
      # Note: if the generated policy is invalid, this will fallback to the default policy, which we don't want!
      policy_bundle_file_path: /tmp/mojaloop-policy.json
  - when:
      condition: << parameters.aws >>
      steps:
        - run:
            name: Upload Anchore reports to s3
            command: |
              aws s3 cp anchore-reports ${AWS_S3_DIR_ANCHORE_REPORTS}/${CIRCLE_PROJECT_REPONAME}/ --recursive
              aws s3 rm ${AWS_S3_DIR_ANCHORE_REPORTS}/latest/ --recursive --exclude "*" --include "${CIRCLE_PROJECT_REPONAME}*"
              aws s3 cp anchore-reports ${AWS_S3_DIR_ANCHORE_REPORTS}/latest/ --recursive
  - run:
      name: Evaluate failures
      command: /tmp/ci-config/container-scanning/anchore-result-diff.js anchore-reports/$(basename ${BASE_IMAGE/:/_})-policy.json anchore-reports/${CIRCLE_PROJECT_REPONAME}*-policy.json
  - store_artifacts:
      path: anchore-reports
  - when:
      condition: << parameters.slack >>
      steps:
        - slack/notify:
            event: fail
            template: SLACK_TEMP_RELEASE_FAILURE
