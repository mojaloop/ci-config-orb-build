description: |
  This job creates a Github release for the project.
executor:
  name: machine
  resource_class: << parameters.resource_class >>
shell: "/bin/bash -eo pipefail"
environment:
  MAIN_BRANCH_NAME: main
parameters:
  slack:
    type: string
    default: ''
  resource_class:
    type: enum
    enum: ["small", "medium", "medium+", "large", "xlarge", "2xlarge", "2xlarge+"]
    default: medium
steps:
  - run:
      name: Install git
      command: |
        sudo apt-get update && sudo apt-get install -y git
  - gh/install
  - checkout
  - configure_git
  - run:
      name: Fetch updated release branch
      command: |
        git fetch origin
        git checkout origin/${CIRCLE_BRANCH}
  - export_version_from_package
  - run:
      name: Check the release changes
      command: |
        echo "Changes are: ${RELEASE_CHANGES}"
  - run:
      name: Setup Slack config
      command: |
        echo "export SLACK_PROJECT_NAME=${CIRCLE_PROJECT_REPONAME}" >> $BASH_ENV
        echo "export SLACK_RELEASE_TYPE='Github Release'" >> $BASH_ENV
        echo "export SLACK_RELEASE_TAG=v${RELEASE_TAG}" >> $BASH_ENV
        echo "export SLACK_RELEASE_URL=https://github.com/mojaloop/${CIRCLE_PROJECT_REPONAME}/releases/tag/v${RELEASE_TAG}" >> $BASH_ENV
        echo "export SLACK_BUILD_ID=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
        echo "export SLACK_CI_URL=${CIRCLE_BUILD_URL}" >> $BASH_ENV
  - run:
      name: Generate SBOM
      command: |
        if ls | grep -Eq '^sbom-v[0-9]+\.[0-9]+\.[0-9]+\.csv$'; then
          echo "Found SBOM file"
          rm -f sbom-*.csv
          # Generate new SBOM
          if [ -f yarn.lock ]; then
            echo "Generating SBOM using Yarn"
            npx -y --package @mojaloop/ml-depcheck-utility@1.1.1 generate-sbom-yarn
          else
            echo "Generating SBOM using NPM"
            npx -y --package @mojaloop/ml-depcheck-utility@1.1.1 generate-sbom-npm
          fi
          git add .
          git commit -m "chore(sbom): update sbom [skip ci]" || echo "No changes to commit"
          git push origin "${CIRCLE_BRANCH}" || echo "Git push failed"
        else
          echo "No matching sbom-<version>.csv found. Skipping SBOM generation."
        fi
  - run:
      name: Create Release
      command: |
        gh release create "v${RELEASE_TAG}" --repo ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} --title "v${RELEASE_TAG} Release" --draft=false --notes "${RELEASE_CHANGES}" ./CHANGELOG.md
  - when:
      condition: << parameters.slack >>
      steps:
        - slack_pass_fail
