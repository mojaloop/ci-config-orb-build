description: |
  This job publishes a pre-release to NPM.
executor: machine
shell: /bin/bash -eo pipefail
environment:
  MAIN_BRANCH_NAME: main
steps:
  - run:
      name: Install git
      command: |
        sudo apt-get update && sudo apt-get install -y git
  - gh/install
  - checkout
  - restore_cache_command
  - configure_git
  - run:
      name: Setup for pre-release
      command: |
        if [[ $CIRCLE_BRANCH =~ ^(major|minor|patch)/(.*)$ ]]; then
          echo "export RELEASE_TAG=${BASH_REMATCH[1]}-${BASH_REMATCH[2]}" > /tmp/prerelease.env
          echo "RELEASE_TAG=${BASH_REMATCH[1]}-${BASH_REMATCH[2]}"
          echo "Pre-releasing ${BASH_REMATCH[1]} version ${BASH_REMATCH[2]}"
          npx standard-version --prerelease "${BASH_REMATCH[2]}" --release-as "${BASH_REMATCH[1]}" --message "chore(release): [ci skip] %s" --skip.changelog --no-verify

          PACKAGE_VERSION=$(cat package-lock.json | jq -r .version)
          echo "export PACKAGE_VERSION=${PACKAGE_VERSION}" >> /tmp/prerelease.env
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}"
        else
          echo "unsupported branch $CIRCLE_BRANCH for pre-release"
          exit 1
        fi
        cat /tmp/prerelease.env >> $BASH_ENV
  - persist_to_workspace:
      root: /tmp
      paths:
        - prerelease.env
  - run:
      name: Push the pre-release
      command: git push --follow-tags origin ${CIRCLE_BRANCH}
  - check_npm_private
  - run:
      name: Setup Slack config
      command: |
        echo "export SLACK_PROJECT_NAME=${CIRCLE_PROJECT_REPONAME}" >> $BASH_ENV
        echo "export SLACK_RELEASE_TYPE='NPM pre-release'" >> $BASH_ENV
        echo "export SLACK_RELEASE_TAG=${RELEASE_TAG}" >> $BASH_ENV
        echo "export SLACK_RELEASE_URL=https://www.npmjs.com/package/@mojaloop/${CIRCLE_PROJECT_REPONAME}/v/${PACKAGE_VERSION}" >> $BASH_ENV
        echo "export SLACK_BUILD_ID=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
        echo "export SLACK_CI_URL=${CIRCLE_BUILD_URL}" >> $BASH_ENV
  - npm_auth
  - npm_publish
  - run:
      name: Trigger downstream workflows
      # DOWNSTREAM_PACKAGE contains newline separated list of downstream repository:token pairs
      command: |
        for repo in $DOWNSTREAM_PACKAGE; do
          REPO_NAME=$(echo $repo | cut -d: -f1)
          echo "Triggering downstream workflow for $REPO_NAME"
          GH_TOKEN=$(echo $repo | cut -d: -f2) gh workflow run npm-package.yaml --repo $REPO_NAME -f image=${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:v${PACKAGE_VERSION} -f tag=${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG
        done
  - slack/notify:
      event: pass
      template: SLACK_TEMP_RELEASE_SUCCESS
  - slack/notify:
      event: fail
      template: SLACK_TEMP_RELEASE_FAILURE
