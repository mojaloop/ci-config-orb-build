description: >
  Runs build and test workflow
parameters:
  pr_title_check_resource_class:
    type: enum
    enum: ["small", "medium", "medium+", "large", "xlarge", "2xlarge", "2xlarge+"]
    default: medium
  setup_resource_class:
    type: enum
    enum: ["small", "medium", "medium+", "large", "xlarge", "2xlarge", "2xlarge+"]
    default: medium
  test_dependencies_resource_class:
    type: enum
    enum: ["small", "medium", "medium+", "large", "xlarge", "2xlarge", "2xlarge+"]
    default: medium
  test_deprecations_resource_class:
    type: enum
    enum: ["small", "medium", "medium+", "large", "xlarge", "2xlarge", "2xlarge+"]
    default: medium
  test_lint_resource_class:
    type: enum
    enum: ["small", "medium", "medium+", "large", "xlarge", "2xlarge", "2xlarge+"]
    default: medium
  test_unit_resource_class:
    type: enum
    enum: ["small", "medium", "medium+", "large", "xlarge", "2xlarge", "2xlarge+"]
    default: medium
  test_coverage_resource_class:
    type: enum
    enum: ["small", "medium", "medium+", "large", "xlarge", "2xlarge", "2xlarge+"]
    default: medium
  vulnerability_check_resource_class:
    type: enum
    enum: ["small", "medium", "medium+", "large", "xlarge", "2xlarge", "2xlarge+"]
    default: medium
  license_audit_resource_class:
    type: enum
    enum: ["small", "medium", "medium+", "large", "xlarge", "2xlarge", "2xlarge+"]
    default: medium
  build_local_resource_class:
    type: enum
    enum: ["small", "medium", "medium+", "large", "xlarge", "2xlarge", "2xlarge+"]
    default: medium
  test_integration_resource_class:
    type: enum
    enum: ["small", "medium", "medium+", "large", "xlarge", "2xlarge", "2xlarge+"]
    default: medium
  test_functional_resource_class:
    type: enum
    enum: ["small", "medium", "medium+", "large", "xlarge", "2xlarge", "2xlarge+"]
    default: medium
  license_scan_resource_class:
    type: enum
    enum: ["small", "medium", "medium+", "large", "xlarge", "2xlarge", "2xlarge+"]
    default: medium
  grype_image_scan_resource_class:
    type: enum
    enum: ["small", "medium", "medium+", "large", "xlarge", "2xlarge", "2xlarge+"]
    default: medium
  release_resource_class:
    type: enum
    enum: ["small", "medium", "medium+", "large", "xlarge", "2xlarge", "2xlarge+"]
    default: medium
  github_release_resource_class:
    type: enum
    enum: ["small", "medium", "medium+", "large", "xlarge", "2xlarge", "2xlarge+"]
    default: medium
  publish_docker_resource_class:
    type: enum
    enum: ["small", "medium", "medium+", "large", "xlarge", "2xlarge", "2xlarge+"]
    default: medium
  publish_npm_resource_class:
    type: enum
    enum: ["small", "medium", "medium+", "large", "xlarge", "2xlarge", "2xlarge+"]
    default: medium
  publish_docker_snapshot_resource_class:
    type: enum
    enum: ["small", "medium", "medium+", "large", "xlarge", "2xlarge", "2xlarge+"]
    default: medium
  publish_npm_snapshot_resource_class:
    type: enum
    enum: ["small", "medium", "medium+", "large", "xlarge", "2xlarge", "2xlarge+"]
    default: medium
  publish_npm_prerelease_resource_class:
    type: enum
    enum: ["small", "medium", "medium+", "large", "xlarge", "2xlarge", "2xlarge+"]
    default: medium
  publish_docker_prerelease_resource_class:
    type: enum
    enum: ["small", "medium", "medium+", "large", "xlarge", "2xlarge", "2xlarge+"]
    default: medium
executor: continuation/default
steps:
  - checkout
  - run:
      name: Create workflow
      environment:
        SCRIPT: <<include(workflows/build_and_test.yml)>>
      command: |
        echo "$SCRIPT" > /tmp/build_and_test.yml
        echo '{
          "pr_title_check_resource_class":"<< parameters.pr_title_check_resource_class>>",
          "setup_resource_class":"<< parameters.setup_resource_class>>",
          "test_dependencies_resource_class":"<< parameters.test_dependencies_resource_class>>",
          "test_deprecations_resource_class":"<< parameters.test_deprecations_resource_class>>",
          "test_lint_resource_class":"<< parameters.test_lint_resource_class>>",
          "test_unit_resource_class":"<< parameters.test_unit_resource_class>>",
          "test_coverage_resource_class":"<< parameters.test_coverage_resource_class>>",
          "vulnerability_check_resource_class":"<< parameters.vulnerability_check_resource_class>>",
          "license_audit_resource_class":"<< parameters.license_audit_resource_class>>",
          "build_local_resource_class":"<< parameters.build_local_resource_class>>",
          "test_integration_resource_class":"<< parameters.test_integration_resource_class>>",
          "test_functional_resource_class":"<< parameters.test_functional_resource_class>>",
          "license_scan_resource_class":"<< parameters.license_scan_resource_class>>",
          "grype_image_scan_resource_class":"<< parameters.grype_image_scan_resource_class>>",
          "release_resource_class":"<< parameters.release_resource_class>>",
          "github_release_resource_class":"<< parameters.github_release_resource_class>>",
          "publish_docker_resource_class":"<< parameters.publish_docker_resource_class>>",
          "publish_npm_resource_class":"<< parameters.publish_npm_resource_class>>",
          "publish_docker_snapshot_resource_class":"<< parameters.publish_docker_snapshot_resource_class>>",
          "publish_npm_snapshot_resource_class":"<< parameters.publish_npm_snapshot_resource_class>>",
          "publish_npm_prerelease_resource_class":"<< parameters.publish_npm_prerelease_resource_class>>",
          "publish_docker_prerelease_resource_class":"<< parameters.publish_docker_prerelease_resource_class>>",
          "git_tag":"'$CIRCLE_CI_TAG'",
          "pull_request":"'$CIRCLE_PULL_REQUEST'",
          "yarn_lock":"'$(test -f yarn.lock && echo "true" || echo "")'",
          "slack":"'$(test -n "$SLACK_ACCESS_TOKEN" && echo "true" || echo "")'",
          "aws":"'$(test -n "$AWS_SECRET_ACCESS_KEY" && echo "true" || echo "")'"
        }' > /tmp/build_and_test_parameters.json
  - run:
      name: Merge additional workflows
      command: |
        if [ -f .circleci/additional-workflows.yaml ]; then
          # Install yq for YAML processing
          sudo apt-get update && sudo apt-get install -y jq
          wget https://github.com/mikefarah/yq/releases/download/v4.43.1/yq_linux_amd64 -O /tmp/yq
          chmod +x /tmp/yq
          /tmp/yq eval-all 'select(fileIndex == 0) * select(fileIndex == 1)' /tmp/build_and_test.yml .circleci/additional-workflows.yaml > /tmp/merged-config.yml
          mv /tmp/merged-config.yml /tmp/build_and_test.yml
          cat /tmp/build_and_test.yml
        fi
  - continuation/continue:
      configuration_path: /tmp/build_and_test.yml
      parameters: /tmp/build_and_test_parameters.json
