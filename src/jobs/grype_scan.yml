description: |
  This job performs vulnerability scanning using Grype.
  It automatically detects whether to scan Docker images or source code based on .grype.yaml configuration.
executor:
  name: machine
  resource_class: << parameters.resource_class >>
environment:
  MAIN_BRANCH_NAME: main
  BASH_ENV: /etc/profile ## Ref: https://circleci.com/docs/env-vars/#alpine-linux
  ENV: ~/.profile
  NVM_ARCH_UNOFFICIAL_OVERRIDE: x64-musl ## Ref: https://github.com/nvm-sh/nvm/issues/1102#issuecomment-550572252
parameters:
  resource_class:
    type: enum
    enum: ["small", "medium", "medium+", "large", "xlarge", "2xlarge", "2xlarge+"]
    default: medium
steps:
  - checkout
  - attach_workspace:
      at: /tmp
  - run:
      name: Check for Grype config and determine scan type
      command: |
        if [ ! -f .grype.yaml ]; then
          echo "Error: .grype.yaml configuration file not found in repository at root level."
          echo "Please add a .grype.yaml file with appropriate vulnerability ignore rules."
          exit 1
        fi

        # Check if scan is disabled
        if grep -q "disabled: true" .grype.yaml; then
          echo "Grype scan is disabled in .grype.yaml"
          circleci-agent step halt
        fi

        # Determine scan type
        SCAN_TYPE=""
        
        # Check explicit scan-type configuration
        if grep -q "scan-type: source" .grype.yaml; then
          SCAN_TYPE="source"
          echo "scan-type: source found in .grype.yaml"
        elif grep -q "scan-type: image" .grype.yaml; then
          SCAN_TYPE="image"
          echo "scan-type: image found in .grype.yaml"
        else
          # Auto-detect based on Dockerfile presence
          if [ -f Dockerfile ]; then
            SCAN_TYPE="image"
            echo "Dockerfile found and no scan-type specified - defaulting to image scan"
          else
            SCAN_TYPE="source"
            echo "No Dockerfile found and no scan-type specified - defaulting to source scan"
          fi
        fi

        echo "export GRYPE_SCAN_TYPE=$SCAN_TYPE" >> $BASH_ENV
        echo "Scan type determined: $SCAN_TYPE"
  - run:
      name: Check dependencies
      command: |
        if ! command -v jq &> /dev/null; then
          echo "jq could not be found, installing..."
          sudo apt-get update && sudo apt-get install -y jq
        fi
  - run:
      name: Load Docker image if image scan
      command: |
        if [ "$GRYPE_SCAN_TYPE" = "image" ]; then
          if [ -f /tmp/docker-image.tar ]; then
            docker load -i /tmp/docker-image.tar
            echo "Docker image loaded successfully"
          else
            echo "Warning: Docker image tar file not found in workspace."
            echo "This is expected for source-only repositories."
            # Check if we actually have a Dockerfile and should have built an image
            if [ -f Dockerfile ]; then
              echo "Error: Dockerfile exists but no Docker image found in workspace."
              echo "Make sure the Build job creates and persists the Docker image."
              exit 1
            fi
          fi
        fi
  - run:
      name: Install Grype
      command: |
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sudo sh -s -- -b /usr/local/bin
  - run:
      name: Run Grype scan
      command: |
        if [ "$GRYPE_SCAN_TYPE" = "image" ]; then
          IMAGE_NAME="${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:local"
          echo "Scanning Docker image: $IMAGE_NAME"
          grype $IMAGE_NAME -c .grype.yaml -o table > grype-results.txt
          grype $IMAGE_NAME -c .grype.yaml -o json > grype-results.json
        else
          echo "Scanning source code in current directory"
          grype dir:. -c .grype.yaml -o table > grype-results.txt
          grype dir:. -c .grype.yaml -o json > grype-results.json
        fi
        
        echo "=== Grype Scan Results ==="
        cat grype-results.txt
  - run:
      name: Check for critical, high and medium vulnerabilities
      command: |
        # Count vulnerabilities in the filtered results
        CRITICAL_COUNT=$(cat grype-results.json | jq '[.matches[] | select(.vulnerability.severity == "Critical")] | length')
        HIGH_COUNT=$(cat grype-results.json | jq '[.matches[] | select(.vulnerability.severity == "High")] | length')
        MEDIUM_COUNT=$(cat grype-results.json | jq '[.matches[] | select(.vulnerability.severity == "Medium")] | length')

        echo "Critical vulnerabilities found: $CRITICAL_COUNT"
        echo "High vulnerabilities found: $HIGH_COUNT"
        echo "Medium vulnerabilities found: $MEDIUM_COUNT"

        # List remaining critical, high and medium vulnerabilities for awareness
        if [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo ""
          echo "Critical severity vulnerabilities:"
          cat grype-results.json | jq -r '.matches[] | select(.vulnerability.severity == "Critical") | "- \(.artifact.name) \(.artifact.version): \(.vulnerability.id)"'
        fi

        if [ "$HIGH_COUNT" -gt 0 ]; then
          echo ""
          echo "High severity vulnerabilities:"
          cat grype-results.json | jq -r '.matches[] | select(.vulnerability.severity == "High") | "- \(.artifact.name) \(.artifact.version): \(.vulnerability.id)"'
        fi

        if [ "$MEDIUM_COUNT" -gt 0 ]; then
          echo ""
          echo "Medium severity vulnerabilities:"
          cat grype-results.json | jq -r '.matches[] | select(.vulnerability.severity == "Medium") | "- \(.artifact.name) \(.artifact.version): \(.vulnerability.id)"'
        fi

        # Fail if any critical, high, or medium vulnerabilities are found
        if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ] || [ "$MEDIUM_COUNT" -gt 0 ]; then
          echo ""
          echo "Critical, High, or Medium vulnerabilities found. Failing the build."
          exit 1
        fi
  - store_artifacts:
      path: grype-results.json
      destination: grype-scan/scan-results.json
  - store_artifacts:
      path: grype-results.txt
      destination: grype-scan/scan-results.txt